
""" Numerical solution of  system of first order ordinary differential equations """
""" plot the phase portrait and state variables as a function of time """

# import modules for solving 
import scipy
import scipy.integrate
import matplotlib as mpl
#from itertools import cycle
# import module for plotting
import matplotlib.pyplot as plt
import pylab as pl
from itertools import cycle
lines=["g-", "r-","b-"]
#lines=["-", "-","-","-"]
linecycler = cycle(lines)
#### parameters' values ############
b= 0.035        # birth rate                               Lambda
e= 0.01012        #natural death rate                         mu
d=0.25 #0.00001 #1.6*10**-6   # transmission rate          beta
c=4        # contact rate                                  c
p=0.55       # proportion of asymptomatic infected             p
g=0.1        #rate of asymptomatic becoming symptomatic       theta
h=0.3    #disease death rate                              sigma
s=0.4      #recovery rate of asymptomatic                     delta1
j=0.2         # recovery rate of symptomatic                   delta2
ks= 0.0000000008 #0.001         # rate at which Susceptibles send tweets          alpha1
           # rate of media campaigns
ke=0.002 #0.1         # rate at which exposed send tweets                  alpha2
kia=  0.005 #0.073      # rate at which infected asymptomatic send tweets       alpha3
kis=  0.0000008 #0.4     # rate at which infected symptomatic send tweets       alpha4
kir= 0.0000001 #0.1     # rate at which recovered send tweets                   alpha5
w= 0.4   # out dating rate of media campaigns                      omega
N=1000        #total population size,N
a= 0.5      # latent period   1/gamma  a=gamma
S=900      #susceptibles
E=50       #exposed
Ia=0       # infected asymptomatic
Is=10      # infected symptomatic
R=0       # recovered
M= 0.4        #  rate at which media campaigns send messages
mstar= (b*ks)/(w*e)
q1=(a+e)
q2=(e+s+g)
q3=(j+h+e)
q4= e 
mstar= (b*ks)/(w*e);
Ro= (c*d*a*(1.0-mstar)*(p*g + (1.0-p)*q2)/(q1*q2*q3))
print 'Ro=', Ro
KB=[0.13,0.25,0.35]
kw=[1,5,10,15,20]
color=["blue","red","green"]
def dX_dt(X, time=0):         # specify the initial time point t0=0
#   m=(z/N)*(Ii + j*Ai + k*Ci)  #lambda
   y = scipy.array([b-   ((d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) + e)*X[0], X[0]*(d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) - q1*X[1] , p*a*X[1] - q2*X[2], (1.0 -p)*a*X[1] + a*X[2] - q3*X[3], s*X[2] + j*X[3] - e*X[4], ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5] ]) # represent the dynamical system with x[0,1,2,3,4,5]=(S,E, Ia, Is,R,M)
   #force = (d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0], X[0]+X[1])) 
   return y
# , d*c*(1-(ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5]))*(((1.0 -p)*a*X[1] + a*X[2] - q3*X[3])*(X[1]+ X[2] + X[3]+ X[4] + X[0]) - X[3]*(b-d*(X[1]+ X[2] + X[3]+ X[4] + X[0])))/(X[1]+ X[2] + X[3]+ X[4] + X[0])**2
if __name__ == "__main__":

	time = scipy.linspace(0, 300, 1000)                         # create 100 time points starting at t0=0
	X0 = scipy.array([900,50, 0, 10, 0, 0.4])                                    # initials conditions: x0=10  and y0=5
	X, infodict = scipy.integrate.odeint(dX_dt, X0, time, full_output=True)
	infodict['message']                                   #'Integration successful.'
	pl.plot(  time, X[:,1], 'g', time,  X[:,2],'c',  time,  X[:,3] , time, X[:,4], 'r:',lw=2)     # x = X[:,0] and y = X[:,1]
	#pl.plot(time, X[:,1],'r-',lw=2) 
	#pl.plot(time, X[:,5],'r--',lw=2)
	#pl.plot(time, X[:,3],'g',lw=1);
	#pl.plot(time, X[:,4],'b:',lw=2)
	pl.legend(['E', 'Ia', 'Is', 'R'])  # plot the variables as functions of time 
       # pl.plot(X[:,0], X[:,3]) 
        pl.axis([0.0, 150.0,0,500])           # plot phase portrait E(M)
	#pl.plot(X[:,5], X[:,2])           # plot phase portrait Ia(M)
	#pl.plot(X[:,5], X[:,4])           # plot phase portrait Is(M)
	#pl.plot(X[:,5], X[:,1])
       # pl.plot(X[:,0], X[:,3]
        plt.xlabel('Time (Days)')
        #pl.xlabel('Media campaigns')
        #pl.xlabel('Infected  asymptomatic population')
       # pl.xlabel('Susceptible population (S)')
         #pl.ylabel('Populations') 
         #pl.ylabel('Force of infection $\\lambda$ ') 
	#pl.ylabel('Infected  asymptomatic population')             
	#pl.ylabel('Infected  symptomatic population')
	#pl.xlabel('Media campaigns rate')
        #pl.ylabel('Recovered population')
	#pl.ylim([0,100])
	#pl.ylabel('Population')
pl.show()


"" "try to find Ro for differents parameters values "" "
import scipy
import scipy.integrate
import numpy as np
# import module for plotting
import pylab as pl
a=np.linspace (0.4, 0.5, 5)    # latent period   1/gamma                     a=gamma
b=0.035          # birth rate                                                   Lambda
e= 0.01012         #natural death rate                                             mu
d=np.linspace (0.1, 0.4, 5)        # transmission rate                           beta
c=4        # contact rate                                                         c
p= np.linspace (0, 0.6, 5)           # proportion of asymptomatic infected          p
g=0.001        #rate of asymptomatic becoming symptomatic                          theta
h=0.3        # disease death rate                                               sigma
s=0.4         #recovery rate of asymptomatic                                      delta1
j=0.2           # recovery rate of symptomatic                                   delta2
ks=   0.0008 #0.001        # rate at which Susceptibles send tweets                         alpha1
           
ke=   0.0015         # rate at which exposed send tweets                                         alpha2
kia= 0.003      # rate at which infected asymptomatic send tweets                            alpha3
kis= np.linspace (0.0004,0.0005,5)       # rate at which infected symptomatic send tweets         alpha4
kir= np.linspace(0.1,0.2,5 )#np.linspace (0.1,0.2,5)       # rate at which recovered send tweets                   alpha5
w=np.linspace (0.3,0.4,5)    # out dating rate of media campaigns                           omega
S=900       #susceptibles
E=50       #exposed
Ia=0       # infected asymptomatic
Is=3      # infected symptomatic
R=0       # recovered
M= 0.4   # rate of media campaigns
mstar= (b*ks)/(w*e)
q1=(a+e)
q2=(e+s+g)
q3=(j+h+e)
q4= e 
Ro= (c*d*a*(1.0-mstar)/(q1*q2*q3))*(p*g + (1.0-p)*q2)
#print Ro 
Ao= w*q1*q2*q3*q4*(p*a*(1.0+(j/q4))+ a*q2*(1.0-p)*(1.0+(j/q4)) + q2*q3 + p*a*q3*(1.0+s))
A2= w*q1*q2*q3*(1.0-Ro)
A1=w*(q1**2)*(q2**2)*(q3**2)*q4+w*q1*q2*q3*((-a*(c*d-e)*(p*g + q2*(1.0-p))+e*(p*a + q2)*q3)*q4+a*e*(p*q3*s+(p*g + q2*(1.0-p)*j))+ c*d*a*b*(p*g+q2*(1.0-p))*(q2*(q3*q4*ke+(1.0-p)*a*(q4*kis+kir*j))+p*a*(q3*(q4*kia+kir*s)+g*(q4*kis+kir*j))))
   #A1 = c + d +((1.0)-e)*(b+d-(x/N)*(a)*(((1.0)/(f+d))+(K3/detV)))
#print A1, A2, Ao
print 'Ro=', Ro
p =np.array([ Ao, A1, A2])
#jj=np.roots(p)
#print     'Roots=', jj
r=np.linspace(0.0, 5.0, 5.0)
D=w*q1*q2*q3*e;
Rc= (4*D*Ao - A1**2)/4*D*Ao;
print 'Rc=', Rc
B= w*q1*q2*q3*(1.0-r);
discriminant =  A1**2.0 - 4*Ao*A2;
end=100;
x=np.linspace(0.0, 10.0, 5.0)
print 'discriminant=', discriminant;
rooot1= (-A1 + discriminant**(0.5))/2.0*Ao;
rooot2= (-A1-discriminant**(0.5))/2.0*Ao;
for i in range(5):
 print 'rooot1=', rooot1, 'rooot2=', rooot2
 print 'gamma=', a[i],  'beta=',  d[i],  'p=', p[i],  'alpha4=', kis[i], 'alpha5=',  kir[i], 'omega=', w[i]
   #polyn= Ao[i]*(x**2) + A1[i]*x + A2[i];
   #pl.plot(r,polyn,'b-')
   #pl.show()

   ##pl.show()
   #pl.plot(Ro,infection)
   #pl.show()
  # lambda as a function of R0
#polyn= Ao*(x**2) + A1*x + A2; # polynome as a function of lambda
#
#pl.xlabel('force of infection ')
#  # pl.ylabel('lambda')
#pl.ylabel(' quadratic ')
#   #pl.plot(r,infection, 'g^-')
#pl.show()

""" fitting the incidence curve for guinea data set"""
#matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import scipy
import scipy.integrate
xdata= np.array([1,2,3,4,5,6,7,8,9,10,11,12])
ydata=([0,0,112,109,60,109,70, 188, 426, 593, 488, 552])
plt.plot(xdata,ydata,'*')
#plt.show()
b= 0.035        # birth rate                               Lambda
e= 0.01012         #natural death rate                         mu
d=0.15   #0.00001 #1.6*10**-6   # transmission rate          beta
c=4          # contact rate                                  c
p=0.55         # proportion of asymptomatic infected             p
g=0.001         #rate of asymptomatic becoming symptomatic       theta
h=0.3         # disease death rate                              sigma
s=0.4       #recovery rate of asymptomatic                     delta1
j=0.2          # recovery rate of symptomatic                   delta2
ks= 0.00008 #0.001         # rate at which Susceptibles send tweets          alpha1
           # rate of media campaigns
ke=0.002   #0.1         # rate at which exposed send tweets                  alpha2
kia=  0.005 #0.073      # rate at which infected asymptomatic send tweets       alpha3
kis=  0.008 #0.4     # rate at which infected symptomatic send tweets       alpha4
kir= 0.001 #0.1     # rate at which recovered send tweets                   alpha5
w= 0.35      # out dating rate of media campaigns                      omega
N=1000        #total population size,N
a= 0.45      # latent period   1/gamma  a=gamma
mstar= (b*ks)/(w*e)
q1=(a+e)
q2=(e+s+g)
q3=(j+h+e)
q4= e 
def dX_dt(X, time=0):         # specify the initial time point t0=0
#   m=(z/N)*(Ii + j*Ai + k*Ci)  #lambda
   y = scipy.array([b-   ((d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) + e)*X[0], X[0]*(d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) - q1*X[1] , p*a*X[1] - q2*X[2], (1.0 -p)*a*X[1] + a*X[2] - q3*X[3], s*X[2] + j*X[3] - e*X[4], ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5] ]) # represent the dynamical system with x[0,1,2,3,4,5]=(S,E, Ia, Is,R,M)
   #force = (d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0], X[0]+X[1])) 
   return y
# , d*c*(1-(ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5]))*(((1.0 -p)*a*X[1] + a*X[2] - q3*X[3])*(X[1]+ X[2] + X[3]+ X[4] + X[0]) - X[3]*(b-d*(X[1]+ X[2] + X[3]+ X[4] + X[0])))/(X[1]+ X[2] + X[3]+ X[4] + X[0])**2
if __name__ == "__main__":

         time = scipy.linspace(1, 12, 12)                         # create 100 time points starting at t0=0
	 X0 = scipy.array([900,50, 0, 10, 0, 0.4])                                    # initials conditions: x0=10  and y0=5
	 X, infodict = scipy.integrate.odeint(dX_dt, X0, time, full_output=True)
	 infodict['message'] 
        # def func(X,p1,p2):
          #return (1-p1)*p2*X[:,1]	 
#popt, pcov= curve_fit (func, xdata, ydata, p0= (0.55,0.45))
#popt
#p1=popt[0]
#p2=popt[1]
#residuals = ydata - func(xdata,p1,p2)
#fres= sum (residuals**2)
#fres
curvex=np.linspace(1,12,1000)
#curvey= func (curvex,p1,p2)
plt.plot(xdata, ydata, '*')
plt.plot( time,(1-p)*a*X[:,1]*100)
#plt.plot(curvex, curvey,'r')
plt.show()


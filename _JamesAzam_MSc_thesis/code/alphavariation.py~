 #from scipy import odeint
import scipy
import scipy.integrate
from pylab import * # for plotting commands
import pylab as pl
from itertools import cycle
lines=["-", "--","-.",":"]
linecycler = cycle(lines)
b=0.035          # birth rate                               Lambda
e=0.01012         #natural death rate                         mu
d=0.7        # transmission rate                           beta
c=1          # contact rate                                  c
p=0.3          # proportion of asymptomatic infected             p
g=0.001         #rate of asymptomatic becoming symptomatic       theta
h=0.2         # disease death rate                              sigma
s=0.3         #recovery rate of asymptomatic                     delta1
j=0.2           # recovery rate of symptomatic                   delta2
#ks=0.00008         # rate at which Susceptibles send tweets          alpha1
       # rate of media campaigns
#ke=0.15         # rate at which exposed send tweets                  alpha2
#kia=  0.005 #  0.073      # rate at which infected asymptomatic send tweets       alpha3
#kis=0.008     # rate at which infected symptomatic send tweets       alpha4
#kir=0.001      # rate at which recovered send tweets                   alpha5
w= 0.425      # out dating rate of media campaigns                      omega
N=1000        #total population size,N
a= 0.385        # latent period   1/gamma  a=gamma
S=900       #susceptibles
E=50       #exposed
Ia=0       # infected asymptomatic
Is=3      # infected symptomatic
R=0       # recovered
M= 0.4        #  rate at which media campaigns send messages
#mstar= (b*ks[i])/(w*e)
q1=(a+e)
q2=(e+s+g)
q3=(j+h+e)
q4= e 
#KE=[0.00008,0.00004,0.00002]
#KW = [0.005,0.002,0.001]
#KE = [0.0008,0,0,0,0]  #alpha1
#KU= [0,0.002,0,0,0]      # alpha2
#KV= [0,0, 0.005,0,0]    #alpha3
#KH= [0,0,0,0.008,0]    #alpha4
#KD= [0,0,0,0,0.001]   #alpha5

ks= [0.00008,0,0,0,0]  #alpha1
ke= [0,0.00008,0,0,0]      # alpha2
kia= [0,0, 0.00008,0,0]    #alpha3
kis= [0,0,0,0.00008,0]    #alpha4
kir= [0,0,0,0,0.00008]   #alpha5
for i in range(5) :
    def deriv1(X,t): # return derivatives of the array y
       return scipy.array([ b -  (( d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) + e)*X[0], X[0]*(d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) - q1*X[1] , p*a*X[1] - q2*X[2], (1.0 -p)*a*X[1] + a*X[2] - q3*X[3], s*X[2] + j*X[3] - e*X[4], ks[i]*X[0] + ke[i]*X[1]+ kia[i]*X[2] + kis[i]*X[3] + kir[i]*X[4] - w*X[5]])#return scipy.array([ y[1], a*y[0]+b*y[1]], )
time = scipy.linspace(0, 50, 1000)

xinit = scipy.array([900,50, 0, 10, 0, 0.4]) # initial values
for i in range(5):
   X1 = scipy.integrate.odeint(deriv1,xinit,time)
   pl.plot(time,X1[:,4],next(linecycler),lw = 2 )
          
#def deriv2(X,t): # return derivatives of the array y
#ke =0.00008
#   return scipy.array([ b -  (( d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) + e)*X[0], X[0]*(d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) - q1*X[1] , p*a*X[1] - q2*X[2], (1.0 -p)*a*X[1] + a*X[2] - q3*X[3], s*X[2] + j*X[3] - e*X[4], ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5]])#return scipy.array([ y[1], a*y[0]+b*y[1]], )
#   
# 
#def deriv3(X,t): # return derivatives of the array y
#   ke =0.02
#   return scipy.array([ b -  (( d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) + e)*X[0], X[0]*(d*c*(1.0-X[5])*X[3]/(X[1]+ X[2] + X[3]+ X[4] + X[0])) - q1*X[1] , p*a*X[1] - q2*X[2], (1.0 -p)*a*X[1] + a*X[2] - q3*X[3], s*X[2] + j*X[3] - e*X[4], ks*X[0] + ke*X[1]+ kia*X[2] + kis*X[3] + kir*X[4] - w*X[5]])#return scipy.array([ y[1], a*y[0]+b*y[1]], )
#     
    

#figure()
#for ks in KE:
# for ke in KU:
#  for kia in KV:
#   for kis in KH:
#    for kir in KD:

#X2 = scipy.integrate.odeint(deriv2,xinit,time)
#X3 = scipy.integrate.odeint(deriv3,xinit,time)


#pl.plot(time,X2[:,3], 'r')
#pl.plot(time,X3[:,3], 'g')
pl.xlabel('time(Days)')
pl.ylabel('Infected symptomatic population')
xlim(0,50)
#pylab.ylabel('Prevalence of Substance abuse ')
#pylab.title('Variation of prevalence with  reinitiation rate $\\gamma_{3}$')
#pylab.grid()
#pl.legend(("$\\alpha_{1}="+str(ks[0])+ "$" " "   "$\\alpha_{2}=\\alpha_{3}=\\alpha_{4}=\\alpha_{5}="+str(kia[1])+"$","$\\alpha_{2}="+str(ke[1])+"$" " "   "$\\alpha_{1}=\\alpha_{3}=\\alpha_{4}=\\alpha_{5}="+str(kia[1])+"$", "$\\alpha_{3}="+str(kia[2])+"$" " "   "$\\alpha_{1}=\\alpha_{2}=\\alpha_{4}=\\alpha_{5}="+str(kia[1])+"$", "$\\alpha_{4}="+str(kis[3])+"$" " "   "$\\alpha_{1}=\\alpha_{2}=\\alpha_{3}=\\alpha_{5}="+str(kia[1])+"$" , "$\\alpha_{5}="+str(kir[4])+"$"  " "   "$\\alpha_{1}=\\alpha_{2}=\\alpha_{3}=\\alpha_{4}="+str(kia[1])+"$"), loc="upper left")#,"$\\gamma_{3}="+str(KE[3])+"$")
#pl.savefig('variation-of-prevelence-with-reinitiation.png', dpi=150)
pl.legend(("$\\alpha_{1}="+str(ks[0])+ "$" ,"$\\alpha_{2}="+str(ke[1])+"$" , "$\\alpha_{3}="+str(kia[2])+"$", "$\\alpha_{4}="+str(kis[3])+"$" , "$\\alpha_{5}="+str(kir[4])+"$"), loc="upper right")
pl.show()
